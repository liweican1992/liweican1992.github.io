<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>licc</title>
  
  <subtitle>我心有猛虎 细嗅蔷薇</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-05-22T10:22:45.816Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>weican Li</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>从源码分析Swift多线程</title>
    <link href="http://yoursite.com/2020/05/22/%E4%BB%8E%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90Swift%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    <id>http://yoursite.com/2020/05/22/%E4%BB%8E%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90Swift%E5%A4%9A%E7%BA%BF%E7%A8%8B/</id>
    <published>2020-05-22T09:18:00.000Z</published>
    <updated>2020-05-22T10:22:45.816Z</updated>
    
    <content type="html"><![CDATA[<p>Swift终于在5.x版本变得稳定，先来看看Swift5.1中的GCD如何使用</p><ul><li><h4 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h4></li></ul><h6 id="串行队列"><a href="#串行队列" class="headerlink" title="串行队列"></a>串行队列</h6><p>串行队列一般只分配一个线程，队列如果有任务执行是不允许插队。<br>串行队列中执行任务的线程不允许被当前队列中的任务阻塞（死锁），但是能被其他对列阻塞</p><p>默认创建的是串行队列</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">let<span class="built_in"> queue </span>= DispatchQueue(label: <span class="string">"com.youdao.queueName"</span>)</span><br></pre></td></tr></table></figure><p>主线程就是串行队列</p><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="module-access"><span class="module"><span class="identifier">DispatchQueue</span>.</span></span>main</span><br></pre></td></tr></table></figure><p>常见的主线程死锁</p><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="comment">//mian Threed</span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="number">1</span>)</span></span></span><br><span class="line">DispatchQueue<span class="selector-class">.main</span><span class="selector-class">.sync</span> &#123;</span><br><span class="line">     print(<span class="number">2</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="number">3</span>)</span></span></span><br></pre></td></tr></table></figure><h6 id="（并行队列）-并发队列"><a href="#（并行队列）-并发队列" class="headerlink" title="（并行队列）  并发队列"></a><del>（并行队列）</del>  并发队列</h6><p>并行(parallel)：指在同一时刻，有多条指令在多个处理器上同时执行。所以无论从微观还是从宏观来看，二者都是一起执行的。<br><img src="http://note.youdao.com/yws/res/2653/42B22ECA21AC47819E5BB63995D7A21B" alt="image"></p><p>并发(concurrency)：指在同一时刻只能有一条指令执行，但多个进程指令被快速的轮换执行，使得在宏观上具有多个进程同时执行的效果，但在微观上并不是同时执行的，只是把时间分成若干段，使多个进程快速交替的执行。</p><p><img src="http://note.youdao.com/yws/res/2652/AEEDBA1F308D4D35947F260BF85E6FD8" alt="image"></p><p>Erlang 之父 Joe Armstrong 的解释</p><p><img src="http://note.youdao.com/yws/res/2665/7610FB2C8F9344258FB0B17186F93850" alt="image"></p><p>创建并发队列</p><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> taskD_queue = <span class="module-access"><span class="module"><span class="identifier">DispatchQueue</span>.</span></span>init(label: <span class="string">"com.youdao.concurrent"</span>, attributes: .concurrent)</span><br></pre></td></tr></table></figure><p>系统并发队列</p><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> globalQueue = <span class="module-access"><span class="module"><span class="identifier">DispatchQueue</span>.</span></span>global<span class="literal">()</span></span><br></pre></td></tr></table></figure><h6 id="更多参数"><a href="#更多参数" class="headerlink" title="更多参数"></a>更多参数</h6><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> convenience init(<span class="string">label:</span> String, <span class="string">qos:</span> DispatchQoS = .unspecified, <span class="string">attributes:</span> DispatchQueue.Attributes = [],</span><br><span class="line"><span class="string">autoreleaseFrequency:</span> DispatchQueue.AutoreleaseFrequency = .inherit, <span class="string">target:</span> DispatchQueue? = nil)</span><br></pre></td></tr></table></figure><p><strong>qos</strong></p><p>Quality of Service(服务质量)<br>队列执行有优先级，优先级由高到低</p><ul><li>userInteractive： 用户交互任务（例如动画，事件处理或更新应用程序的用户界面）的服务</li><li>userInitiated：用户发起的动作需要立即得到结果 如打开文档，显示电子邮件</li><li>default：默认的</li><li>utility:用户不主动关注的，一些耗时操作。下载或者导入数据,utility任务一般有一个进度条让用户能看到</li><li>background：最低优先级 后台运行。建立索引 清理文件</li></ul><p>默认值为 <strong>default</strong></p><p>还有一个特殊的<strong>unspecified</strong></p><blockquote><p>它表示当前没有QoS信息，系统应该根据环境自动推断QoS信息。如果使用遗弃的API，线程有可能会脱离QoS，这个时候，线程就是unspecified QoS类别的</p></blockquote><p>因此系统并发队列有6个</p><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> globalQueue1 = <span class="module-access"><span class="module"><span class="identifier">DispatchQueue</span>.</span></span>global(qos: .userInteractive)</span><br><span class="line"><span class="keyword">let</span> globalQueue2 = <span class="module-access"><span class="module"><span class="identifier">DispatchQueue</span>.</span></span>global(qos: .userInitiated)</span><br><span class="line"><span class="keyword">let</span> globalQueue5 = <span class="module-access"><span class="module"><span class="identifier">DispatchQueue</span>.</span></span>global<span class="literal">()</span> <span class="comment">//qos default </span></span><br><span class="line"><span class="keyword">let</span> globalQueue3 = <span class="module-access"><span class="module"><span class="identifier">DispatchQueue</span>.</span></span>global(qos: .utility)</span><br><span class="line"><span class="keyword">let</span> globalQueue4 = <span class="module-access"><span class="module"><span class="identifier">DispatchQueue</span>.</span></span>global(qos: .background)</span><br><span class="line"><span class="comment">//❌  不存在这种</span></span><br><span class="line"><span class="keyword">let</span> globalQueue4 = <span class="module-access"><span class="module"><span class="identifier">DispatchQueue</span>.</span></span>global(qos: .unspecified)</span><br></pre></td></tr></table></figure><blockquote><p>要注意，在Low Power Mode下，qos为background的队列将被暂停</p></blockquote><p><strong>attributes</strong></p><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Set</span></span><br><span class="line"><span class="keyword">public</span> struct <span class="string">Attributes :</span> OptionSet</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> let <span class="string">concurrent:</span> DispatchQueue.Attributes</span><br><span class="line"></span><br><span class="line"><span class="meta">@available</span>(OSX <span class="number">10.12</span>, iOS <span class="number">10.0</span>, tvOS <span class="number">10.0</span>, watchOS <span class="number">3.0</span>, *)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> let <span class="string">initiallyInactive:</span> DispatchQueue.Attributes</span><br></pre></td></tr></table></figure><ul><li>concurrent：标记为并发队列</li><li>initiallyInactive：标识队列中的任务需要手动触发，由队列activate()方法触发。未标记initiallyInactive的队列会自动触发任务</li></ul><p>不标明此参数，默认是串行队列。</p><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="comment">//串行队列</span></span><br><span class="line"><span class="keyword">let</span> task_queue_ser = <span class="module-access"><span class="module"><span class="identifier">DispatchQueue</span>.</span></span>init(label: <span class="string">"com.youdao.queue"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//并发队列</span></span><br><span class="line"><span class="keyword">let</span> task_queue_concurrent = <span class="module-access"><span class="module"><span class="identifier">DispatchQueue</span>.</span></span>init(label: <span class="string">"com.youdao.queue"</span>, attributes: .concurrent)</span><br><span class="line"></span><br><span class="line"><span class="comment">//手动触发</span></span><br><span class="line"><span class="keyword">let</span> task_queue_initial = <span class="module-access"><span class="module"><span class="identifier">DispatchQueue</span>.</span></span>init(label: <span class="string">"com.youdao.queue"</span>, attributes: .initiallyInactive)</span><br><span class="line">task_queue_initial.active<span class="literal">()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//手动触发的并发队列</span></span><br><span class="line"><span class="keyword">let</span> task_queue_combine = <span class="module-access"><span class="module"><span class="identifier">DispatchQueue</span>.</span></span>init(label: <span class="string">"com.youdao.queue"</span>, attributes: <span class="literal">[.<span class="identifier">concurrent</span>, .<span class="identifier">initiallyInactive</span>]</span>)</span><br><span class="line">task_queue_combine.active<span class="literal">()</span></span><br></pre></td></tr></table></figure><p><strong>autoreleaseFrequency</strong></p><p>autoreleaseFrequency是枚举，标明autoreleasepool的释放频率</p><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="keyword">enum</span> AutoreleaseFrequency &#123;</span><br><span class="line">        <span class="comment">//继承目标队列</span></span><br><span class="line">        <span class="keyword">case</span> inherit</span><br><span class="line">        <span class="comment">//跟随每个任务的执行周期进行自动创建和释放</span></span><br><span class="line">        @available(OSX <span class="number">10.12</span>, iOS <span class="number">10.0</span>, tvOS <span class="number">10.0</span>, watchOS <span class="number">3.0</span>, *)</span><br><span class="line">        <span class="keyword">case</span> workItem</span><br><span class="line">        <span class="comment">//不创建autoreleasepool</span></span><br><span class="line">        @available(OSX <span class="number">10.12</span>, iOS <span class="number">10.0</span>, tvOS <span class="number">10.0</span>, watchOS <span class="number">3.0</span>, *)</span><br><span class="line">        <span class="keyword">case</span> never</span><br><span class="line">        </span><br><span class="line">        ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自己创建的队列，默认值是 .inherit</p><p>系统定义的全局队列，此属性是 .never</p><p>如果任务中需要大量创建对象，可以设置为.never，然后手动创建autoreleasepool</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Swift终于在5.x版本变得稳定，先来看看Swift5.1中的GCD如何使用&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;h4 id=&quot;队列&quot;&gt;&lt;a href=&quot;#队列&quot; class=&quot;headerlink&quot; title=&quot;队列&quot;&gt;&lt;/a&gt;队列&lt;/h4&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 i
      
    
    </summary>
    
    
    
      <category term="多线程" scheme="http://yoursite.com/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>转移简书到Github</title>
    <link href="http://yoursite.com/2020/05/15/%E8%BD%AC%E7%A7%BB%E7%AE%80%E4%B9%A6%E5%88%B0Github/"/>
    <id>http://yoursite.com/2020/05/15/%E8%BD%AC%E7%A7%BB%E7%AE%80%E4%B9%A6%E5%88%B0Github/</id>
    <published>2020-05-15T10:40:00.000Z</published>
    <updated>2020-05-18T03:42:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天简书账号莫名其妙的被封了，加上之前封了好几篇技术文章。终于使我下定决心干掉简书。</p><p>用简书已经有5年了，写了20多篇博客，收获了100+的粉丝。</p><a id="more"></a><p><img src="/images/pasted-1.png" alt="upload successful"></p><p><img src="/images/pasted-0.png" alt="upload successful"><br><img src="/images/pasted-2.png" alt="upload successful"></p><p>甚至还赚了几块钱</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天简书账号莫名其妙的被封了，加上之前封了好几篇技术文章。终于使我下定决心干掉简书。&lt;/p&gt;
&lt;p&gt;用简书已经有5年了，写了20多篇博客，收获了100+的粉丝。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="杂谈" scheme="http://yoursite.com/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2020/05/15/hello-world/"/>
    <id>http://yoursite.com/2020/05/15/hello-world/</id>
    <published>2020-05-15T09:16:12.000Z</published>
    <updated>2020-05-15T09:16:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
