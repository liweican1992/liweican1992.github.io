<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>licc</title>
  
  <subtitle>我心有猛虎 细嗅蔷薇</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-06-01T03:49:40.851Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>weican Li</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>从源码分析Swift多线程—DispatchGroup</title>
    <link href="http://yoursite.com/2020/05/30/%E4%BB%8E%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90Swift%E5%A4%9A%E7%BA%BF%E7%A8%8B%E2%80%94DispatchGroup/"/>
    <id>http://yoursite.com/2020/05/30/%E4%BB%8E%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90Swift%E5%A4%9A%E7%BA%BF%E7%A8%8B%E2%80%94DispatchGroup/</id>
    <published>2020-05-30T14:18:46.000Z</published>
    <updated>2020-06-01T03:49:40.851Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文从源码分析GCD中的DispatchGroup是怎么调度的，notify的背后是如何实现的。如果你对Swift中GCD如何使用不太了解。可以参考<a href="http://leevcan.com/2020/05/22/%E4%BB%8E%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90Swift%E5%A4%9A%E7%BA%BF%E7%A8%8B/" target="_blank" rel="noopener">《详解Swift多线程》</a></p></blockquote><h3 id="API"><a href="#API" class="headerlink" title="API"></a>API</h3><p>以下代码是DispatchGroup的常用使用场景</p><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">        let g1 = DispatchGroup.init()</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//直接输入notify null</span></span><br><span class="line">        g1.notify(<span class="string">queue:</span> DispatchQueue.global()) &#123;</span><br><span class="line">            print(<span class="string">"notify null"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//A B 并发 A B 完成后开启C任务</span></span><br><span class="line"></span><br><span class="line">        g1.enter()</span><br><span class="line">        DispatchQueue.global().async &#123;</span><br><span class="line">            <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="number">0.</span>.<span class="number">.3</span>&#123;</span><br><span class="line">              print(<span class="string">"task A: \(Thread.current)"</span>)</span><br><span class="line">          &#125;</span><br><span class="line">          g1.leave()</span><br><span class="line">        &#125;</span><br><span class="line">      </span><br><span class="line">        g1.enter()</span><br><span class="line">        DispatchQueue.global().async &#123;</span><br><span class="line">            <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="number">0.</span>.<span class="number">.3</span> &#123;</span><br><span class="line">                print(<span class="string">"task B: \(Thread.current)"</span>)</span><br><span class="line">          &#125;</span><br><span class="line">            sleep(UInt32(<span class="number">3.5</span>))</span><br><span class="line">          g1.leave()</span><br><span class="line">      &#125;</span><br><span class="line">        </span><br><span class="line">      g1.notify(<span class="string">queue:</span> DispatchQueue.global()) &#123;</span><br><span class="line">            print(<span class="string">"notify A&amp;B"</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      g1.notify(<span class="string">queue:</span> DispatchQueue.global()) &#123;</span><br><span class="line">            print(<span class="string">"notify A&amp;B again"</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      </span><br><span class="line">      </span><br><span class="line">      <span class="comment">//打印结果</span></span><br><span class="line">notify <span class="literal">null</span></span><br><span class="line">task <span class="string">A:</span> &lt;<span class="string">NSThread:</span> <span class="number">0x600002be85c0</span>&gt;&#123;number = <span class="number">4</span>, name = (<span class="literal">null</span>)&#125;</span><br><span class="line">task <span class="string">B:</span> &lt;<span class="string">NSThread:</span> <span class="number">0x600002bc5300</span>&gt;&#123;number = <span class="number">6</span>, name = (<span class="literal">null</span>)&#125;</span><br><span class="line">task <span class="string">A:</span> &lt;<span class="string">NSThread:</span> <span class="number">0x600002be85c0</span>&gt;&#123;number = <span class="number">4</span>, name = (<span class="literal">null</span>)&#125;</span><br><span class="line">task <span class="string">B:</span> &lt;<span class="string">NSThread:</span> <span class="number">0x600002bc5300</span>&gt;&#123;number = <span class="number">6</span>, name = (<span class="literal">null</span>)&#125;</span><br><span class="line">task <span class="string">A:</span> &lt;<span class="string">NSThread:</span> <span class="number">0x600002be85c0</span>&gt;&#123;number = <span class="number">4</span>, name = (<span class="literal">null</span>)&#125;</span><br><span class="line">task <span class="string">A:</span> &lt;<span class="string">NSThread:</span> <span class="number">0x600002be85c0</span>&gt;&#123;number = <span class="number">4</span>, name = (<span class="literal">null</span>)&#125;</span><br><span class="line">task <span class="string">B:</span> &lt;<span class="string">NSThread:</span> <span class="number">0x600002bc5300</span>&gt;&#123;number = <span class="number">6</span>, name = (<span class="literal">null</span>)&#125;</span><br><span class="line">task <span class="string">B:</span> &lt;<span class="string">NSThread:</span> <span class="number">0x600002bc5300</span>&gt;&#123;number = <span class="number">6</span>, name = (<span class="literal">null</span>)&#125;</span><br><span class="line">notify A&amp;B</span><br><span class="line">notify A&amp;B again</span><br></pre></td></tr></table></figure><p>由以上代码结果可以得知，notity之前没有调用enter()和levae()会直接被调用。<br>如果在notity之前调用了enter()和leave()。notify会在最后一个leave()调用后才会回调。</p><p>wait()的使用</p><figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line"><span class="built_in">let</span> <span class="built_in">g1</span> = DispatchGroup.init()</span><br><span class="line">        </span><br><span class="line">  <span class="built_in">g1</span>.enter()</span><br><span class="line">  DispatchQueue.global().async &#123;</span><br><span class="line">      <span class="keyword">for</span> <span class="symbol">_</span> <span class="keyword">in</span> <span class="number">0</span>...<span class="number">3</span>&#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"task A: \(Thread.current)"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">g1</span>.leave()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">g1</span>.enter()</span><br><span class="line">  DispatchQueue.global().async &#123;</span><br><span class="line">      <span class="keyword">for</span> <span class="symbol">_</span> <span class="keyword">in</span> <span class="number">0</span>...<span class="number">3</span> &#123;</span><br><span class="line">          <span class="built_in">print</span>(<span class="string">"task B: \(Thread.current)"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">      sleep(UInt32(<span class="number">3.5</span>))</span><br><span class="line">    <span class="built_in">g1</span>.leave()</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  <span class="built_in">let</span> result = <span class="built_in">g1</span>.wait(timeout: .now() + <span class="number">3</span>)</span><br><span class="line">  </span><br><span class="line"> </span><br><span class="line">  switch result &#123;</span><br><span class="line">  case .success:</span><br><span class="line">      <span class="built_in">g1</span>.notify(queue: DispatchQueue.global()) &#123;</span><br><span class="line">          DispatchQueue.global().async &#123;</span><br><span class="line">              <span class="keyword">for</span> <span class="symbol">_</span> <span class="keyword">in</span> <span class="number">0</span>...<span class="number">3</span> &#123;</span><br><span class="line">                  <span class="built_in">print</span>(<span class="string">"task D: \(Thread.current)"</span>)</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">  case .timedOut:</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">"timedOut"</span>)</span><br><span class="line">      <span class="built_in">break</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  //打印结果</span><br><span class="line">  timedOut</span><br></pre></td></tr></table></figure><h3 id="查看源码"><a href="#查看源码" class="headerlink" title="查看源码"></a>查看源码</h3><p>Swift使用的GCD是桥接OC的源码。所以底层还是libdispatch。</p><p>源码可以去opensource下载：<a href="https://opensource.apple.com/tarballs/libdispatch/" target="_blank" rel="noopener">https://opensource.apple.com/tarballs/libdispatch/</a></p><p>也可以去github上Apple官方仓库去下载：<a href="https://github.com/apple/swift-corelibs-libdispatch" target="_blank" rel="noopener">https://github.com/apple/swift-corelibs-libdispatch</a></p><blockquote><p>要注意Apple的源码是一直在迭代升级的。封装也是越来越深，在opensource上可以看到很多版本的源码。写这篇文章时候最新版本为1173.40.5版本。本文分析基于931.60.2版本。网速很多资料的源码都是很老的187.9版本之前。内部实现变动很大。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/liweican1992/hexoPic/img/20200601114808.png" alt=""></p><p>下载源码后，可以在semaphore.c中找到DispatchGroup的实现。</p><p><img src="https://cdn.jsdelivr.net/gh/liweican1992/hexoPic/img/20200601114842.png" alt=""></p><h4 id="create"><a href="#create" class="headerlink" title="create"></a>create</h4><p>先来看看dispatch_group_create的实现</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//libdispatch-913.60.2.tar.gz</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">dispatch_group_t</span></span><br><span class="line">dispatch_group_create(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> _dispatch_group_create_with_count(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//而网上的资料一般都比较老</span></span><br><span class="line"><span class="comment">//一般是 libdispatch-187.9.tar.gz 或者之前</span></span><br><span class="line"><span class="comment">//这是旧的代码 可以看到传入的值是LONG_MAX</span></span><br><span class="line"><span class="keyword">dispatch_group_t</span></span><br><span class="line">dispatch_group_create(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> (<span class="keyword">dispatch_group_t</span>)dispatch_semaphore_create(LONG_MAX);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>_dispatch_group_create_with_count的实现</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">DISPATCH_ALWAYS_INLINE</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">dispatch_group_t</span></span><br><span class="line">_dispatch_group_create_with_count(<span class="keyword">long</span> count)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//dispatch_group_t就是dispatchGroup</span></span><br><span class="line"><span class="comment">//dispatch_group_t本质上就是dispatch_group_s 详见下方</span></span><br><span class="line"><span class="keyword">dispatch_group_t</span> dg = (<span class="keyword">dispatch_group_t</span>)_dispatch_object_alloc(</span><br><span class="line">DISPATCH_VTABLE(group), <span class="keyword">sizeof</span>(struct dispatch_group_s));</span><br><span class="line"><span class="comment">//把count的值存进去结构体</span></span><br><span class="line">_dispatch_semaphore_class_init(count, dg);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 如果有值 就执行os_atomic_store2o</span></span><br><span class="line"><span class="comment">     </span></span><br><span class="line"><span class="comment">_dispatch_group_create_and_enter 就是传入1进来</span></span><br><span class="line"><span class="comment">dispatch_group_t</span></span><br><span class="line"><span class="comment">    _dispatch_group_create_and_enter(void)&#123;</span></span><br><span class="line"><span class="comment">return _dispatch_group_create_with_count(1);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">    **/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (count) &#123;</span><br><span class="line">os_atomic_store2o(dg, do_ref_cnt, <span class="number">1</span>, relaxed); <span class="comment">// &lt;rdar://problem/22318411&gt;</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">#define os_atomic_store2o(p, f, v, m) \</span></span><br><span class="line"><span class="comment">注意 &amp;(p)-&gt;f</span></span><br><span class="line"><span class="comment">等于把1存进dg.do_ref_cnt</span></span><br><span class="line"><span class="comment">os_atomic_store(&amp;(p)-&gt;f, (v), m)</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> dg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们一个一个来分析</p><p>通过搜索发现dispatch_group_t本质上就是dispatch_group_s</p><p><img src="https://cdn.jsdelivr.net/gh/liweican1992/hexoPic/img/20200601114914.png" alt=""></p><p>dispatch_group_s是一个结构体</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">dispatch_group_s</span> &#123;</span></span><br><span class="line">DISPATCH_SEMAPHORE_HEADER(group, dg);</span><br><span class="line">    <span class="comment">//看名字知道和wait方法有关</span></span><br><span class="line"><span class="keyword">int</span> <span class="keyword">volatile</span> dg_waiters;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//dispatch_continuation_s可以自行搜索 最后是个dispatch_object_s</span></span><br><span class="line"><span class="comment">//这里可以理解为存储一个链表的 链表头和尾。看参数名知道和notify有关</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">dispatch_continuation_s</span> *<span class="title">volatile</span> <span class="title">dg_notify_head</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">dispatch_continuation_s</span> *<span class="title">volatile</span> <span class="title">dg_notify_tail</span>;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>从上面代码可以看到，creat方法创建了一个dispatch_group_t（也是dispatch_group_s）出来，默认传进来的count是0，并且把count通过dispatch_semaphore_class_init(count, dg)存了起来。</p><p>dispatch_semaphore_class_init</p><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//_dispatch_semaphore_class_init(count, dg);</span></span><br><span class="line">static void</span><br><span class="line"><span class="constructor">_dispatch_semaphore_class_init(<span class="params">long</span> <span class="params">value</span>, <span class="params">dispatch_semaphore_class_t</span> <span class="params">dsemau</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//dsemau就是dg 本质就是把传递进来的count存起来</span></span><br><span class="line"><span class="keyword">struct</span> dispatch_semaphore_header_s *dsema = dsemau._dsema_hdr;</span><br><span class="line"></span><br><span class="line">dsema-&gt;do_next = DISPATCH_OBJECT_LISTLESS;</span><br><span class="line">dsema-&gt;do_targetq = <span class="constructor">_dispatch_get_root_queue(DISPATCH_QOS_DEFAULT, <span class="params">false</span>)</span>;</span><br><span class="line"><span class="comment">//value就是传进来的count</span></span><br><span class="line">dsema-&gt;dsema_value = value;</span><br><span class="line"><span class="constructor">_dispatch_sema4_init(&amp;<span class="params">dsema</span>-&gt;<span class="params">dsema_sema</span>, <span class="params">_DSEMA4_POLICY_FIFO</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ok,通过creat方法我们知道我们创建了一个dispatch_group_s出来，并且把0存了起来。知道dispatch_group_s中有一个类似链表的头和尾，看参数名知道和notify有关。</p><h4 id="enter"><a href="#enter" class="headerlink" title="enter()"></a>enter()</h4><p>enter() 本质上调用dispatch_group_enter()</p><p>dispatch_group_enter</p><figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span></span><br><span class="line">dispatch_group_enter(dispatch_group_t dg)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//os_atomic_inc_orig2o是宏定义，可以一直点进去看。本质上就是把dg的dg_value做+1操作。</span></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">value</span> = os_atomic_inc_orig2o(dg, dg_value, acquire);</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> (slowpath((unsigned <span class="keyword">long</span>)<span class="keyword">value</span> &gt;= (unsigned <span class="keyword">long</span>)LONG_MAX)) &#123;</span><br><span class="line">DISPATCH_CLIENT_CRASH(<span class="keyword">value</span>,</span><br><span class="line"><span class="string">"Too many nested calls to dispatch_group_enter()"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">value</span> == <span class="number">0</span>) &#123;</span><br><span class="line">_dispatch_retain(dg); <span class="comment">// &lt;rdar://problem/22318411&gt;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从源码上看enter没做其余的操作，就是把dg的dg_value做+1操作。如果dg_value值过大就会crash。</p><h4 id="leave"><a href="#leave" class="headerlink" title="leave()"></a>leave()</h4><p>那么同理我们可以想到leave()应该是做-1操作。</p><figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span></span><br><span class="line">dispatch_group_leave(dispatch_group_t dg)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//dg_value -1</span></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">value</span> = os_atomic_dec2o(dg, dg_value, release);</span><br><span class="line"><span class="keyword">if</span> (slowpath(<span class="keyword">value</span> == <span class="number">0</span>)) &#123;</span><br><span class="line">    <span class="comment">//当value==0 执行_dispatch_group_wake</span></span><br><span class="line"><span class="keyword">return</span> (<span class="keyword">void</span>)_dispatch_group_wake(dg, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//不成对出现 crash</span></span><br><span class="line"><span class="keyword">if</span> (slowpath(<span class="keyword">value</span> &lt; <span class="number">0</span>)) &#123;</span><br><span class="line">DISPATCH_CLIENT_CRASH(<span class="keyword">value</span>,</span><br><span class="line"><span class="string">"Unbalanced call to dispatch_group_leave()"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从源码得知，leave的核心逻辑是判断value==0时候执行<strong>_dispatch_group_wake</strong>。同时当levae次数比enter多时候，value&lt;0会crash</p><p>同时真正执行的逻辑应该在_dispatch_group_wake中</p><h4 id="notify"><a href="#notify" class="headerlink" title="notify()"></a>notify()</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">DISPATCH_ALWAYS_INLINE</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">void</span></span><br><span class="line">_dispatch_group_notify(<span class="keyword">dispatch_group_t</span> dg, <span class="keyword">dispatch_queue_t</span> dq,</span><br><span class="line"><span class="keyword">dispatch_continuation_t</span> dsn)</span><br><span class="line">&#123;</span><br><span class="line">dsn-&gt;dc_data = dq;</span><br><span class="line">dsn-&gt;do_next = <span class="literal">NULL</span>;</span><br><span class="line">_dispatch_retain(dq);</span><br><span class="line"><span class="keyword">if</span> (os_mpsc_push_update_tail(dg, dg_notify, dsn, do_next)) &#123;</span><br><span class="line">_dispatch_retain(dg);</span><br><span class="line">os_atomic_store2o(dg, dg_notify_head, dsn, ordered);</span><br><span class="line"><span class="comment">// seq_cst with atomic store to notify_head &lt;rdar://problem/11750916&gt;</span></span><br><span class="line"><span class="comment">//判断dg.dg_value是否为0 </span></span><br><span class="line"><span class="keyword">if</span> (os_atomic_load2o(dg, dg_value, ordered) == <span class="number">0</span>) &#123;</span><br><span class="line">_dispatch_group_wake(dg, <span class="literal">false</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，核心逻辑还是dg.davalue为0的话，就直接调用_dispatch_group_wake。所以可以解释为什么notify调用之前没有enter和leave为什么会直接被回调。因为没有enter和leave，dg_value为0，直接调用_dispatch_group_wake</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本文从源码分析GCD中的DispatchGroup是怎么调度的，notify的背后是如何实现的。如果你对Swift中GCD如何使用不太了解。可以参考&lt;a href=&quot;http://leevcan.com/2020/05/22/%E4%BB%8E%E
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>详解Swift多线程</title>
    <link href="http://yoursite.com/2020/05/22/%E4%BB%8E%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90Swift%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    <id>http://yoursite.com/2020/05/22/%E4%BB%8E%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90Swift%E5%A4%9A%E7%BA%BF%E7%A8%8B/</id>
    <published>2020-05-22T09:18:00.000Z</published>
    <updated>2020-06-01T04:11:42.566Z</updated>
    
    <content type="html"><![CDATA[<p>Swift终于在5.x版本变得稳定，先来看看Swift5.1中的GCD如何使用</p><ul><li><h4 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h4></li></ul><h6 id="串行队列"><a href="#串行队列" class="headerlink" title="串行队列"></a>串行队列</h6><p>串行队列一般只分配一个线程，队列如果有任务执行是不允许插队。<br>串行队列中执行任务的线程不允许被当前队列中的任务阻塞（死锁），但是能被其他对列阻塞</p><p>默认创建的是串行队列</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">let<span class="built_in"> queue </span>= DispatchQueue(label: <span class="string">"com.youdao.queueName"</span>)</span><br></pre></td></tr></table></figure><p>主线程就是串行队列</p><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="module-access"><span class="module"><span class="identifier">DispatchQueue</span>.</span></span>main</span><br></pre></td></tr></table></figure><p>常见的主线程死锁</p><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="comment">//main Threed</span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="number">1</span>)</span></span></span><br><span class="line">DispatchQueue<span class="selector-class">.main</span><span class="selector-class">.sync</span> &#123;</span><br><span class="line">     print(<span class="number">2</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="number">3</span>)</span></span></span><br></pre></td></tr></table></figure><a id="more"></a><h6 id="（并行队列）-并发队列"><a href="#（并行队列）-并发队列" class="headerlink" title="（并行队列）  并发队列"></a><del>（并行队列）</del>  并发队列</h6><p>并行(parallel)：指在同一时刻，有多条指令在多个处理器上同时执行。所以无论从微观还是从宏观来看，二者都是一起执行的。<br><img src="https://cdn.jsdelivr.net/gh/liweican1992/hexoPic/img/20200601121052.png" alt=""><br>并发(concurrency)：指在同一时刻只能有一条指令执行，但多个进程指令被快速的轮换执行，使得在宏观上具有多个进程同时执行的效果，但在微观上并不是同时执行的，只是把时间分成若干段，使多个进程快速交替的执行。</p><p><img src="https://cdn.jsdelivr.net/gh/liweican1992/hexoPic/img/20200601121114.png" alt=""></p><p>Erlang 之父 Joe Armstrong 的解释</p><p><img src="https://cdn.jsdelivr.net/gh/liweican1992/hexoPic/img/20200601121133.png" alt=""></p><p>创建并发队列</p><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> taskD_queue = <span class="module-access"><span class="module"><span class="identifier">DispatchQueue</span>.</span></span>init(label: <span class="string">"com.youdao.concurrent"</span>, attributes: .concurrent)</span><br></pre></td></tr></table></figure><p>系统并发队列</p><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> globalQueue = <span class="module-access"><span class="module"><span class="identifier">DispatchQueue</span>.</span></span>global<span class="literal">()</span></span><br></pre></td></tr></table></figure><h6 id="更多参数"><a href="#更多参数" class="headerlink" title="更多参数"></a>更多参数</h6><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> convenience init(<span class="string">label:</span> String, <span class="string">qos:</span> DispatchQoS = .unspecified, <span class="string">attributes:</span> DispatchQueue.Attributes = [],</span><br><span class="line"><span class="string">autoreleaseFrequency:</span> DispatchQueue.AutoreleaseFrequency = .inherit, <span class="string">target:</span> DispatchQueue? = nil)</span><br></pre></td></tr></table></figure><p><strong>qos</strong></p><p>Quality of Service(服务质量)<br>队列执行有优先级，优先级由高到低</p><ul><li>userInteractive： 用户交互任务（例如动画，事件处理或更新应用程序的用户界面）的服务</li><li>userInitiated：用户发起的动作需要立即得到结果 如打开文档，显示电子邮件</li><li>default：默认的</li><li>utility:用户不主动关注的，一些耗时操作。下载或者导入数据,utility任务一般有一个进度条让用户能看到</li><li>background：最低优先级 后台运行。建立索引 清理文件</li></ul><p>默认值为 <strong>default</strong></p><p>还有一个特殊的<strong>unspecified</strong></p><blockquote><p>它表示当前没有QoS信息，系统应该根据环境自动推断QoS信息。如果使用遗弃的API，线程有可能会脱离QoS，这个时候，线程就是unspecified QoS类别的</p></blockquote><p>因此系统并发队列有6个</p><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> globalQueue1 = <span class="module-access"><span class="module"><span class="identifier">DispatchQueue</span>.</span></span>global(qos: .userInteractive)</span><br><span class="line"><span class="keyword">let</span> globalQueue2 = <span class="module-access"><span class="module"><span class="identifier">DispatchQueue</span>.</span></span>global(qos: .userInitiated)</span><br><span class="line"><span class="keyword">let</span> globalQueue5 = <span class="module-access"><span class="module"><span class="identifier">DispatchQueue</span>.</span></span>global<span class="literal">()</span> <span class="comment">//qos default </span></span><br><span class="line"><span class="keyword">let</span> globalQueue3 = <span class="module-access"><span class="module"><span class="identifier">DispatchQueue</span>.</span></span>global(qos: .utility)</span><br><span class="line"><span class="keyword">let</span> globalQueue4 = <span class="module-access"><span class="module"><span class="identifier">DispatchQueue</span>.</span></span>global(qos: .background)</span><br><span class="line"><span class="comment">//❌  不存在这种</span></span><br><span class="line"><span class="keyword">let</span> globalQueue4 = <span class="module-access"><span class="module"><span class="identifier">DispatchQueue</span>.</span></span>global(qos: .unspecified)</span><br></pre></td></tr></table></figure><blockquote><p>要注意，在Low Power Mode下，qos为background的队列将被暂停</p></blockquote><p><strong>attributes</strong></p><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Set</span></span><br><span class="line"><span class="keyword">public</span> struct <span class="string">Attributes :</span> OptionSet</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> let <span class="string">concurrent:</span> DispatchQueue.Attributes</span><br><span class="line"></span><br><span class="line"><span class="meta">@available</span>(OSX <span class="number">10.12</span>, iOS <span class="number">10.0</span>, tvOS <span class="number">10.0</span>, watchOS <span class="number">3.0</span>, *)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> let <span class="string">initiallyInactive:</span> DispatchQueue.Attributes</span><br></pre></td></tr></table></figure><ul><li>concurrent：标记为并发队列</li><li>initiallyInactive：标识队列中的任务需要手动触发，由队列activate()方法触发。未标记initiallyInactive的队列会自动触发任务</li></ul><p>不标明此参数，默认是串行队列。</p><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="comment">//串行队列</span></span><br><span class="line"><span class="keyword">let</span> task_queue_ser = <span class="module-access"><span class="module"><span class="identifier">DispatchQueue</span>.</span></span>init(label: <span class="string">"com.youdao.queue"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//并发队列</span></span><br><span class="line"><span class="keyword">let</span> task_queue_concurrent = <span class="module-access"><span class="module"><span class="identifier">DispatchQueue</span>.</span></span>init(label: <span class="string">"com.youdao.queue"</span>, attributes: .concurrent)</span><br><span class="line"></span><br><span class="line"><span class="comment">//手动触发</span></span><br><span class="line"><span class="keyword">let</span> task_queue_initial = <span class="module-access"><span class="module"><span class="identifier">DispatchQueue</span>.</span></span>init(label: <span class="string">"com.youdao.queue"</span>, attributes: .initiallyInactive)</span><br><span class="line">task_queue_initial.active<span class="literal">()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//手动触发的并发队列</span></span><br><span class="line"><span class="keyword">let</span> task_queue_combine = <span class="module-access"><span class="module"><span class="identifier">DispatchQueue</span>.</span></span>init(label: <span class="string">"com.youdao.queue"</span>, attributes: <span class="literal">[.<span class="identifier">concurrent</span>, .<span class="identifier">initiallyInactive</span>]</span>)</span><br><span class="line">task_queue_combine.active<span class="literal">()</span></span><br></pre></td></tr></table></figure><p><strong>autoreleaseFrequency</strong></p><p>autoreleaseFrequency是枚举，标明autoreleasepool的释放频率</p><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="keyword">enum</span> AutoreleaseFrequency &#123;</span><br><span class="line">        <span class="comment">//继承目标队列</span></span><br><span class="line">        <span class="keyword">case</span> inherit</span><br><span class="line">        <span class="comment">//跟随每个任务的执行周期进行自动创建和释放</span></span><br><span class="line">        @available(OSX <span class="number">10.12</span>, iOS <span class="number">10.0</span>, tvOS <span class="number">10.0</span>, watchOS <span class="number">3.0</span>, *)</span><br><span class="line">        <span class="keyword">case</span> workItem</span><br><span class="line">        <span class="comment">//不创建autoreleasepool</span></span><br><span class="line">        @available(OSX <span class="number">10.12</span>, iOS <span class="number">10.0</span>, tvOS <span class="number">10.0</span>, watchOS <span class="number">3.0</span>, *)</span><br><span class="line">        <span class="keyword">case</span> never</span><br><span class="line">        </span><br><span class="line">        ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自己创建的队列，默认值是 .inherit</p><p>系统定义的全局队列，此属性是 .never</p><p>如果任务中需要大量创建对象，可以设置为.never，然后手动创建autoreleasepool</p><p><strong>target</strong></p><p>设置一个队列的目标队列，讲当前队列中的任务放到目标队列中取执行。目标队列最终约束了队列任务的优先级。</p><p>所有手动创建的队列，target最终都指向了系统自带的队列。主队列或者全局并发队列。</p><blockquote><p>为什么不直接加到系统队列，而是要自定义队列呢？这样的好处是可以将任务分组管理。如单独阻塞某个队列中的任务，而不是阻塞系统队列中的全部任务。如果阻塞了系统队列，所有指向它的原队列也就被阻塞。</p></blockquote><p>设置target可以在DispatchQueue初始化时候指定。</p><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">let task_queue = DispatchQueue.init(<span class="string">label:</span> <span class="string">"abc"</span>, <span class="string">qos:</span> .<span class="keyword">default</span>, <span class="string">attributes:</span> [.concurrent], <span class="string">autoreleaseFrequency:</span> .workItem, <span class="string">target:</span> DispatchQueue.global())</span><br></pre></td></tr></table></figure><p>也可以指定attributes为.initiallyInactive。手动触发前使用setTarget更改指定的target</p><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> task_queue = <span class="module-access"><span class="module"><span class="identifier">DispatchQueue</span>.</span></span>init(label: <span class="string">"abc"</span>, qos: .default, attributes: <span class="literal">[.<span class="identifier">initiallyInactive</span>, .<span class="identifier">concurrent</span>]</span>, autoreleaseFrequency: .workItem, target: <span class="module-access"><span class="module"><span class="identifier">DispatchQueue</span>.</span></span>global<span class="literal">()</span>)</span><br><span class="line">        </span><br><span class="line">task_queue.set<span class="constructor">Target(<span class="params">queue</span>: DispatchQueue.<span class="params">global</span>(<span class="params">qos</span>: .<span class="params">background</span>)</span>)</span><br></pre></td></tr></table></figure><p>可以思考下，下方代码会输出什么。</p><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> task_queue = <span class="module-access"><span class="module"><span class="identifier">DispatchQueue</span>.</span></span>init(label: <span class="string">"abc"</span>, qos: .default, attributes: <span class="literal">[.<span class="identifier">initiallyInactive</span>, .<span class="identifier">concurrent</span>]</span>, autoreleaseFrequency: .workItem, target: <span class="module-access"><span class="module"><span class="identifier">DispatchQueue</span>.</span></span>main)</span><br><span class="line">        </span><br><span class="line">task_queue.async &#123;</span><br><span class="line">    for k <span class="keyword">in</span> <span class="number">0.</span>.&lt;<span class="number">10</span> &#123;</span><br><span class="line">        print( <span class="string">"A"</span> + <span class="constructor">String(<span class="params">k</span>)</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">task_queue.async &#123;</span><br><span class="line">    for k <span class="keyword">in</span> <span class="number">0.</span>.&lt;<span class="number">10</span> &#123;</span><br><span class="line">        print( <span class="string">"B"</span> + <span class="constructor">String(<span class="params">k</span>)</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">        </span><br><span class="line">task_queue.activate<span class="literal">()</span></span><br></pre></td></tr></table></figure><p>Group</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Swift终于在5.x版本变得稳定，先来看看Swift5.1中的GCD如何使用&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;h4 id=&quot;队列&quot;&gt;&lt;a href=&quot;#队列&quot; class=&quot;headerlink&quot; title=&quot;队列&quot;&gt;&lt;/a&gt;队列&lt;/h4&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&quot;串行队列&quot;&gt;&lt;a href=&quot;#串行队列&quot; class=&quot;headerlink&quot; title=&quot;串行队列&quot;&gt;&lt;/a&gt;串行队列&lt;/h6&gt;&lt;p&gt;串行队列一般只分配一个线程，队列如果有任务执行是不允许插队。&lt;br&gt;串行队列中执行任务的线程不允许被当前队列中的任务阻塞（死锁），但是能被其他对列阻塞&lt;/p&gt;
&lt;p&gt;默认创建的是串行队列&lt;/p&gt;
&lt;figure class=&quot;highlight routeros&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;let&lt;span class=&quot;built_in&quot;&gt; queue &lt;/span&gt;= DispatchQueue(label: &lt;span class=&quot;string&quot;&gt;&quot;com.youdao.queueName&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;主线程就是串行队列&lt;/p&gt;
&lt;figure class=&quot;highlight reasonml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;module-access&quot;&gt;&lt;span class=&quot;module&quot;&gt;&lt;span class=&quot;identifier&quot;&gt;DispatchQueue&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;main&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;常见的主线程死锁&lt;/p&gt;
&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//main Threed&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;DispatchQueue&lt;span class=&quot;selector-class&quot;&gt;.main&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.sync&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     print(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
      <category term="多线程" scheme="http://yoursite.com/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>转移简书到Github</title>
    <link href="http://yoursite.com/2020/05/15/%E8%BD%AC%E7%A7%BB%E7%AE%80%E4%B9%A6%E5%88%B0Github/"/>
    <id>http://yoursite.com/2020/05/15/%E8%BD%AC%E7%A7%BB%E7%AE%80%E4%B9%A6%E5%88%B0Github/</id>
    <published>2020-05-15T10:40:00.000Z</published>
    <updated>2020-06-01T06:24:00.581Z</updated>
    
    <content type="html"><![CDATA[<p>今天简书账号莫名其妙的被封了，加上之前封了好几篇技术文章。终于使我下定决心干掉简书。</p><p>用简书已经有5年了，写了20多篇博客，收获了100+的粉丝。</p><a id="more"></a><p><img src="https://cdn.jsdelivr.net/gh/liweican1992/hexoPic/img/20200601142307.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/liweican1992/hexoPic/img/20200601142320.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/liweican1992/hexoPic/img/20200601142351.png" alt=""></p><p>甚至还赚了几块钱</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天简书账号莫名其妙的被封了，加上之前封了好几篇技术文章。终于使我下定决心干掉简书。&lt;/p&gt;
&lt;p&gt;用简书已经有5年了，写了20多篇博客，收获了100+的粉丝。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="杂谈" scheme="http://yoursite.com/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>Facebook iOS SDK 造成大面积崩溃</title>
    <link href="http://yoursite.com/2020/05/08/Facebook-iOS-SDK-%E9%80%A0%E6%88%90%E5%A4%A7%E9%9D%A2%E7%A7%AF%E5%B4%A9%E6%BA%83/"/>
    <id>http://yoursite.com/2020/05/08/Facebook-iOS-SDK-%E9%80%A0%E6%88%90%E5%A4%A7%E9%9D%A2%E7%A7%AF%E5%B4%A9%E6%BA%83/</id>
    <published>2020-05-08T06:28:00.000Z</published>
    <updated>2020-06-01T06:31:48.262Z</updated>
    
    <content type="html"><![CDATA[<p>  一大早就接到警告，App崩溃率直线上升。赶紧定位错误，发现是崩在了Facebook SDK上面。</p><p><img src="https://cdn.jsdelivr.net/gh/liweican1992/hexoPic/img/20200601142944.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/liweican1992/hexoPic/img/20200601143021.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/liweican1992/hexoPic/img/20200601143043.png" alt=""></p><p>因为我们是海外项目。受影响最大，所以最先接到警告。<br>看了下，应该是Facebook SDK初始化时候就crash了，同时也有用户反馈App一启动就闪退。</p><p>但是今天再测试（2020.05.08 北京时间），无法复现问题，看来已经被修复了。<br>去Github上围观了一下，影响范围可谓是巨大</p><blockquote><p>详见issue:<br><a href="https://github.com/facebook/facebook-ios-sdk/issues/1373" target="_blank" rel="noopener">https://github.com/facebook/facebook-ios-sdk/issues/1373</a><br><a href="https://github.com/facebook/facebook-ios-sdk/issues/1374" target="_blank" rel="noopener">https://github.com/facebook/facebook-ios-sdk/issues/1374</a></p></blockquote><p>官方也承认是SDK的问题。<br><img src="https://cdn.jsdelivr.net/gh/liweican1992/hexoPic/img/20200601143102.png" alt=""></p><p>有人猜测是将Bool值放入了字典中<br><img src="https://cdn.jsdelivr.net/gh/liweican1992/hexoPic/img/20200601143112.png" alt=""></p><p>问题已经解决，但是教训还是比较深刻的。任何改动上线前，一定要进行灰度测试。</p><p>只是可惜了我们App的99.9%的稳定性 :(<br><img src="https://cdn.jsdelivr.net/gh/liweican1992/hexoPic/img/20200601143129.png" alt=""><br>参考链接 ：</p><p><a href="https://www.theverge.com/2020/5/7/21250689/facebook-sdk-bug-ios-app-crash-apple-spotify-venmo-tiktok-tinder" target="_blank" rel="noopener">Why a small Facebook bug wreaked havoc on some of the most popular iOS apps</a><br><a href="https://www.thepaper.cn/newsDetail_forward_7301372" target="_blank" rel="noopener">小扎的Facebook，搞炸了几十万个iOS应用程序</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;  一大早就接到警告，App崩溃率直线上升。赶紧定位错误，发现是崩在了Facebook SDK上面。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/liweican1992/hexoPic/img/20200601142944.p
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>iOS使用Public Link 进行外部测试</title>
    <link href="http://yoursite.com/2020/03/13/iOS%E4%BD%BF%E7%94%A8Public-Link-%E8%BF%9B%E8%A1%8C%E5%A4%96%E9%83%A8%E6%B5%8B%E8%AF%95/"/>
    <id>http://yoursite.com/2020/03/13/iOS%E4%BD%BF%E7%94%A8Public-Link-%E8%BF%9B%E8%A1%8C%E5%A4%96%E9%83%A8%E6%B5%8B%E8%AF%95/</id>
    <published>2020-03-13T06:33:00.000Z</published>
    <updated>2020-06-01T06:40:48.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>public link 是Apple 2018年推出的新功能，可以很低成本的进行外部灰度测试，并且可以零成本的测试内购功能</p></blockquote><p>  最近负责的项目进行了重大改版，准备申请Apple推荐。想先发个Beta版本给Apple的编辑人员看一下，也小范围的进行下灰度测试。最方便的办法就是通过Testflight进行测试。</p><p>  还记得2017年时候申请推荐，发外部测试还需要手动的把Apple工作人员的邮箱添加进去。Apple在2018年推出的public link很好的解决了这个问题。</p><blockquote><p>公共链接可让您与开发团队外部的人员共享您的应用程序，而无需电子邮件或其他联系信息。您可以在社交媒体，消息传递平台，电子邮件活动等上共享公共链接，以扩大Beta测试的可见性。如果您没有一组成熟的外部测试人员，则使用公共链接可能是增加应用程序覆盖面并扩大测试受众的有效方法。</p></blockquote><p>具体的步骤其实都是官网可查，这里简单说一下</p><ul><li><h4 id="创建public-link"><a href="#创建public-link" class="headerlink" title="创建public link"></a>创建public link</h4></li></ul><p>打包上传到App Store后，等处理完成。去Testflight页面。创建一个新群组</p><p><img src="https://cdn.jsdelivr.net/gh/liweican1992/hexoPic/img/20200601143338.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/liweican1992/hexoPic/img/20200601143428.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/liweican1992/hexoPic/img/20200601143440.png" alt=""></p><p>填写完审核信息后，就可以提交审核了。和平时发版的审核时间差不多。</p><p>审核通过后就可以启用public link<br><img src="https://cdn.jsdelivr.net/gh/liweican1992/hexoPic/img/20200601143457.png" alt=""></p><p>启用后可以设置最大测试人数，上限为10000人<br><img src="https://cdn.jsdelivr.net/gh/liweican1992/hexoPic/img/20200601143513.png" alt=""></p><ul><li><h4 id="分发public-link"><a href="#分发public-link" class="headerlink" title="分发public link"></a>分发public link</h4>拿到public link后，就可以发放给用户了</li></ul><p><img src="https://cdn.jsdelivr.net/gh/liweican1992/hexoPic/img/20200601143609.png" alt=""></p><p>用户点击开始测试，就会去往Testflight。如果没装会去Testflight下载页面。</p><p><img src="https://cdn.jsdelivr.net/gh/liweican1992/hexoPic/img/20200601143634.png" alt=""></p><p>用户接受后就可以正常安装了。同时在Testflight后台，能看到当前接受邀请人员的Apple ID</p><p><img src="https://cdn.jsdelivr.net/gh/liweican1992/hexoPic/img/20200601143656.png" alt=""></p><ul><li><h4 id="内购测试"><a href="#内购测试" class="headerlink" title="内购测试"></a>内购测试</h4></li></ul><p>如果你的App有内购项目，或者部分功能需要内购才能使用。分发链接时候要谨慎。<br>我们在内部Testflight测试时候，可以使用沙盒账户进行内购购买，当你使用public link进行外部测试时候。这个时候内购环境是一种特殊的内购环境。</p><blockquote><p>public link环境下，用户可以使用自己真实的Apple ID进行内购购买，且不会进行扣费。订阅项目同样不会进行续订</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/liweican1992/hexoPic/img/20200601143722.png" alt=""></p><blockquote><p>参考资料:<br><a href="https://developer.apple.com/videos/play/wwdc2018/301/" target="_blank" rel="noopener">What’s New in App Store Connect</a><br><a href="https://developer.apple.com/testflight/" target="_blank" rel="noopener">使用TestFlight简化Beta测试</a><br><a href="https://help.apple.com/app-store-connect/#/dev859139543" target="_blank" rel="noopener">邀请外部测试员</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;public link 是Apple 2018年推出的新功能，可以很低成本的进行外部灰度测试，并且可以零成本的测试内购功能&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;  最近负责的项目进行了重大改版，准备申请Apple推荐。想先发个Beta版本给A
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>[IAP]iOS如何使用促销代码</title>
    <link href="http://yoursite.com/2019/08/21/IAP-iOS%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E4%BF%83%E9%94%80%E4%BB%A3%E7%A0%81/"/>
    <id>http://yoursite.com/2019/08/21/IAP-iOS%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E4%BF%83%E9%94%80%E4%BB%A3%E7%A0%81/</id>
    <published>2019-08-21T06:41:00.000Z</published>
    <updated>2020-06-01T06:46:09.887Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>最近项目上线了Vip订阅功能，包含连续包月和连续包年。上线后市场和运营同事问能不能给一些资深用户送几个月的会员，或者搞活动送会员。因为是海外项目，内购不需要用户系统（我们也没有用户系统）完全依赖Apple购买凭证。所以不能使用国内App那种服务端生成兑换码的做法。</p></blockquote><p>因为完全依赖Apple，所以还是要从Apple这边下手。自然而然想到了Apple的促销代码。<br>先看看什么是促销代码 <a href="https://help.apple.com/app-store-connect/#/dev50869de4a" target="_blank" rel="noopener">官方文档戳这里</a></p><p><img src="https://cdn.jsdelivr.net/gh/liweican1992/hexoPic/img/20200601144252.png" alt=""></p><p>可以看到，促销代码是可以兑换内购项目的，并且订购一个自动续期的订阅并不会自动续费。</p><ul><li><h3 id="申请"><a href="#申请" class="headerlink" title="申请"></a>申请</h3>在App Store Connect后台找到了促销代码，点击你所需要兑换的内购项目，新增即可<br>具体的还是看 <a href="https://help.apple.com/app-store-connect/#/dev1e322b132" target="_blank" rel="noopener">官方文档</a></li></ul><p><img src="https://cdn.jsdelivr.net/gh/liweican1992/hexoPic/img/20200601144324.png" alt=""></p><p>注意下申请出来的代码有时间限制，28天之内不用就会过期。</p><p><img src="https://cdn.jsdelivr.net/gh/liweican1992/hexoPic/img/20200601144348.png" alt=""></p><p>申请以后从历史记录中就可以看到代码，把这个神秘代码发给用户即可。<br>当然，一般用户都会一脸懵逼，不知道如何兑换</p><ul><li><h3 id="兑换"><a href="#兑换" class="headerlink" title="兑换"></a>兑换</h3><p>首先打开手机上的App Store，选中App那一栏，拖到底，点击兑换<br><img src="https://cdn.jsdelivr.net/gh/liweican1992/hexoPic/img/20200601144419.png" alt=""></p><p>然后输入密码什么的一直继续</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/liweican1992/hexoPic/img/20200601144446.png" alt=""></p><p>选中手动输入，输入之前申请的促销码</p><p><img src="https://cdn.jsdelivr.net/gh/liweican1992/hexoPic/img/20200601144515.png" alt=""></p><p>用户如果之前下载过，就可以直接打开，未下载这里就是下载按钮。<br>打开App后发现会员已经生效，看日志确实收到了购买成功的回调。并且上报的购买价格是0</p><blockquote><p>这个方法同样可以测试线上的购买流程，上线后想回测下又舍不得花钱或者报销麻烦，都可以用这种方法测试</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;最近项目上线了Vip订阅功能，包含连续包月和连续包年。上线后市场和运营同事问能不能给一些资深用户送几个月的会员，或者搞活动送会员。因为是海外项目，内购不需要用户系统（我们也没有用户系统）完全依赖Apple购买凭证。所以不能使用国内App那种服务端生
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Widget开发指南</title>
    <link href="http://yoursite.com/2018/11/12/Widget%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97/"/>
    <id>http://yoursite.com/2018/11/12/Widget%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97/</id>
    <published>2018-11-12T12:05:00.000Z</published>
    <updated>2020-06-01T06:13:50.067Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>目前负责的App新增了Widget功能，之后在组内分享中分享了下Widget的开发经验。基于之前的PPT提炼出了这篇文章。本篇文章只讲基于Widget关于iOS10+ 之后的知识点。</p></blockquote><p>Widget是iOS8以后Apple推出的一项功能，并且在iOS10后进行了大幅的优化。</p><p>在主屏幕和锁定屏幕上向右滑动来访问Widget,也可以在对应的App图标上面使用3D Touch按压访问相应的Widget。</p><p><img src="https://cdn.jsdelivr.net/gh/liweican1992/hexoPic/img/20200601121241.png" alt=""></p><a id="more"></a><h1 id="Widget设计规范和要求"><a href="#Widget设计规范和要求" class="headerlink" title="Widget设计规范和要求"></a>Widget设计规范和要求</h1><p>Widget是一个单独的进程，和主App独立，但是支持数据共享。在设计和开发Widget时候要注意以下几点设计规范：</p><ul><li><p><strong>设计一个友好的交互体验</strong></p><p>Widget用来执行非常简单的任务，尽可能提供点击一次就能完成的任务，Widget不支持窗口滚动，不支持键盘输入（其实是可以做到键盘输入的 具体办法见后面）<br>详见<a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ExtensibilityPG/Today.html" target="_blank" rel="noopener">《App Extension Programming Guide》</a></p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/liweican1992/hexoPic/img/20200601121350.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/liweican1992/hexoPic/img/20200601121409.png" alt=""></p><ul><li><p><strong>要快速显示内容</strong></p><p>  内容要尽量从本地加载，依赖网络的内容要在本地做缓存，以免长时间等待。确保每次出现都有内容</p></li><li><p><strong>提供充足的边距和填充</strong></p><p>  避免将内容扩展到Widegt边缘。<strong>每行最多显示4个按钮或图标</strong></p></li><li><p><strong>适应屏幕</strong></p><p>  iOS10以后，Widget支持折叠和展开。<strong>折叠状态下默认高度为110且不可更改。展开高度不超过一个屏幕的高度</strong>。（官方文档说最低高度为2.5个默认行高 44<em>3.5=110）官方推荐使用AutoLayout布局。<br>  *</em>横屏时候宽度还是默认屏幕宽度。不会拉伸**<br><img src="https://cdn.jsdelivr.net/gh/liweican1992/hexoPic/img/20200601121436.png" alt=""></p></li><li><p><strong>不要自定义背景色</strong></p><p>  系统自带模糊的背景色，尽量不要改(当然只是建议咯）。不要用照片做背景，会和壁纸冲突。<br><img src="https://cdn.jsdelivr.net/gh/liweican1992/hexoPic/img/20200601121508.png" alt=""></p></li><li><p><strong>注意字体颜色、取一个好名字、一个App可以有多个Widget</strong></p><p>  字体颜色尽量是深色或者深灰色（然而用白色的最多）。如果一个App存在多个Widget，要命名清晰。Widget的名字里面，<strong>英文字母系统会自动转换成大写</strong>。</p><p>  <strong>Logo会自动使用主App的icon</strong></p></li><li><p><strong>适当的时候让用户跳转到主App来做更多的事</strong></p><p>  Widget尽量只给用户提供简单的功能（规范而已。。），不要在Widget中出现“打开App”等按钮。点击Widget icon后会自动吊起主App。和主App交互使用URLScheme方法。后面会讲到。</p></li><li><p><strong>很短的生命周期、要注意内存问题</strong></p><p>离开屏幕2s+就会被销毁，后面会讲到</p></li></ul><h1 id="建立Widget-Target"><a href="#建立Widget-Target" class="headerlink" title="建立Widget Target"></a>建立Widget Target</h1><p>选择主工程，在Project设置界面下方点击加号，新建Today Extension</p><p><img src="https://cdn.jsdelivr.net/gh/liweican1992/hexoPic/img/20200601121536.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/liweican1992/hexoPic/img/20200601121558.png" alt=""><br>系统会自动生成TodayViewController和storyBoard。不要忘记在Target设置里面设置基本信息，版本号和主App保持一致，否则上传iTunes Connect会有警告邮件</p><p><strong>也要注意选择Deployment Target。Xcode10默认是iOS12</strong><br><img src="https://upload-images.jianshu.io/upload_images/525360-3793f8a5b159e998.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h1 id="和Widget共享代码"><a href="#和Widget共享代码" class="headerlink" title="和Widget共享代码"></a>和Widget共享代码</h1><ul><li><p>支持pod导入三方库，在podfile中新增Widget的target<br><img src="https://cdn.jsdelivr.net/gh/liweican1992/hexoPic/img/20200601121627.png" alt="">Xcode10 后，如果在Build Phases中运行Script。执行pod可能报错。解决办法见<br><a href="https://www.jianshu.com/p/ebdcfc86886b" target="_blank" rel="noopener">《#iOS知识小集# Xcode10 pod install 报错》</a></p></li><li><p>主工程代码共享<br>在需要共享的类的.m文件中的Target Membership中勾选Widget所在的Target<br><img src="https://cdn.jsdelivr.net/gh/liweican1992/hexoPic/img/20200601121710.png" alt=""></p></li></ul><h1 id="Widget代码实现"><a href="#Widget代码实现" class="headerlink" title="Widget代码实现"></a>Widget代码实现</h1><p><strong>NCWidgetProviding协议</strong><br>Widget工程建立后会自动生成TodayViewController。<br>会遵循NCWidgetProviding协议<br>iOS10以后这个协议只有两个方法</p><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">-</span> (void)<span class="selector-tag">widgetPerformUpdateWithCompletionHandler</span><span class="selector-pseudo">:(void</span> (^)(NCUpdateResult result))<span class="selector-tag">completionHandler</span>;</span><br><span class="line"><span class="selector-tag">-</span> (void)<span class="selector-tag">widgetActiveDisplayModeDidChange</span><span class="selector-pseudo">:(NCWidgetDisplayMode)activeDisplayMode</span> <span class="selector-tag">withMaximumSize</span><span class="selector-pseudo">:(CGSize)maxSize</span> <span class="selector-tag">NS_AVAILABLE_IOS</span>(<span class="number">10</span>_0);</span><br></pre></td></tr></table></figure><p>其中widgetPerformUpdateWithCompletionHandler 默认返回NCUpdateResultNewData</p><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">- (<span class="type">void</span>)widgetPerformUpdateWithCompletionHandler:(<span class="type">void</span> (^)(NCUpdateResult))completionHandler &#123;</span><br><span class="line">    // <span class="keyword">Perform</span> <span class="keyword">any</span> setup necessary <span class="keyword">in</span> <span class="keyword">order</span> <span class="keyword">to</span> <span class="keyword">update</span> the <span class="keyword">view</span>.</span><br><span class="line">    </span><br><span class="line">    // <span class="keyword">If</span> an error <span class="keyword">is</span> encountered, use NCUpdateResultFailed</span><br><span class="line">    // <span class="keyword">If</span> ther<span class="string">e's no update required, use NCUpdateResultNoData</span></span><br><span class="line"><span class="string">    // If there'</span>s an <span class="keyword">update</span>, use NCUpdateResultNewData</span><br><span class="line"></span><br><span class="line">    completionHandler(NCUpdateResultNewData);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个可以忽略掉，直接返回NCUpdateResultNewData就好了<br>iOS10以后支持折叠和展开功能，折叠状态下默认高度为110且不可更改。展开高度不超过一个屏幕的高度。（官方文档说最低高度为2.5个默认行高 44*3.5=110）</p><p>在ViewDidLoaded方法中设置是否开启折叠功能</p><figure class="highlight gml"><table><tr><td class="code"><pre><span class="line"><span class="comment">//NCWidgetDisplayModeCompact 收起模式</span></span><br><span class="line"><span class="comment">//NCWidgetDisplayModeExpanded  展开模式</span></span><br><span class="line">     </span><br><span class="line"><span class="literal">self</span>.extensionContext.widgetLargestAvailableDisplayMode = NCWidgetDisplayModeExpanded;</span><br></pre></td></tr></table></figure><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)widgetActiveDisplayModeDidChange:(NCWidgetDisplayMode)activeDisplayMode withMaximumSize:(<span class="built_in">CGSize</span>)maxSize &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (activeDisplayMode == NCWidgetDisplayModeCompact) &#123;</span><br><span class="line">        <span class="keyword">self</span>.preferredContentSize = <span class="built_in">CGSizeMake</span>(maxSize.width, <span class="number">110</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">self</span>.preferredContentSize = <span class="built_in">CGSizeMake</span>(maxSize.width, <span class="number">200</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>使用纯代码</strong></p><p>示例工程会默认使用StoryBoard，如果想使用纯代码。进行以下步骤</p><ol><li>删除MainInterface.storyboard文件和NSExtensionMainStoryboard键值对<br><img src="https://cdn.jsdelivr.net/gh/liweican1992/hexoPic/img/20200601121837.png" alt=""></li><li>添加NSExtensionPrincipalClass为key ,value为TodayViewController<br><img src="https://cdn.jsdelivr.net/gh/liweican1992/hexoPic/img/20200601121932.png" alt=""></li></ol><p><strong>图片管理</strong><br>Widget可以使用Asset Catalog管理图片，命名为Assets，和主工程使用方式一致</p><p><strong>代码调试</strong><br>在Widget工程更新代码后，可以运行主工程，然后添加Widget。就可以看到最新的效果展示。<br>如果想断点调试，要选择Widget Target<br><img src="https://cdn.jsdelivr.net/gh/liweican1992/hexoPic/img/20200601141147.png" alt=""><br><strong>和主工程共享数据</strong></p><blockquote><p>Widget和主工程是完全独立的两个工程,两个独立的进程。所以数据共享是通过App Groups进行的。</p></blockquote><p>App Groups需要去开发者中心去创建。ID必须以group开头。后面一般跟公司名称。<br><img src="https://cdn.jsdelivr.net/gh/liweican1992/hexoPic/img/20200601141205.png" alt=""><br>建立完成后回到主工程，打开App Groups开关，就能刷新出刚刚创建的Groups,打钩远中</p><p><img src="https://cdn.jsdelivr.net/gh/liweican1992/hexoPic/img/20200601141214.png" alt=""><br>然后把Widget Target 也打开App Groups，选中同一个Groups</p><p><img src="https://cdn.jsdelivr.net/gh/liweican1992/hexoPic/img/20200601141231.png" alt=""><br>App Groups可以通过NSUserDefaults和NSFileManager共享数据</p><ul><li>NSUserDefaults</li></ul><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="comment">//主工程中存</span></span><br><span class="line">NSUserDefaults *shared = [[NSUserDefaults alloc] <span class="string">initWithSuiteName:</span>@<span class="string">"group.YouDao.xxxx"</span>];</span><br><span class="line">[shared <span class="string">setObject:</span>_targetLanguage.abb <span class="string">forKey:</span>@<span class="string">"UD_TargetLanguage_Widget_key"</span>];</span><br><span class="line">[shared synchronize];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//Widget 中取</span></span><br><span class="line">[[NSUserDefaults alloc] <span class="string">initWithSuiteName:</span>@<span class="string">"group.YouDao.xxxx"</span>] <span class="string">objectForKey:</span>@<span class="string">"UD_TargetLanguage_Widget_key"</span>];</span><br></pre></td></tr></table></figure><ul><li>NSFileManager</li></ul><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">//存</span></span><br><span class="line"><span class="built_in">NSString</span> *groupID = <span class="string">@"group.YouDao.xxxx"</span>;</span><br><span class="line"><span class="built_in">NSError</span> *err = <span class="literal">nil</span>;</span><br><span class="line"><span class="built_in">NSURL</span> *fileUrl = [[<span class="built_in">NSFileManager</span> defaultManager] containerURLForSecurityApplicationGroupIdentifier:groupID];</span><br><span class="line">fileUrl = [fileUrl URLByAppendingPathComponent:<span class="string">@"Library/Caches/test"</span>];</span><br><span class="line"><span class="built_in">NSString</span> *value = <span class="string">@"test"</span>;</span><br><span class="line"><span class="built_in">BOOL</span> result = [value writeToURL:fileUrl atomically:<span class="literal">YES</span> encoding:<span class="built_in">NSUTF8StringEncoding</span> error:&amp;err];</span><br><span class="line"><span class="keyword">if</span>(result)&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"写入成功"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//取</span></span><br><span class="line"><span class="built_in">NSString</span> *groupID = <span class="string">@"group.YouDao.xxxx"</span>;</span><br><span class="line"><span class="built_in">NSError</span> *err = <span class="literal">nil</span>;</span><br><span class="line"><span class="built_in">NSURL</span> *containerURL = [[<span class="built_in">NSFileManager</span> defaultManager] containerURLForSecurityApplicationGroupIdentifier:groupID];</span><br><span class="line">containerURL = [containerURL URLByAppendingPathComponent:<span class="string">@"Library/Caches/test"</span>];</span><br><span class="line"><span class="built_in">NSString</span> *value = [<span class="built_in">NSString</span> stringWithContentsOfURL:containerURL encoding:<span class="built_in">NSUTF8StringEncoding</span> error:&amp;err];</span><br></pre></td></tr></table></figure><blockquote><p>App Gropu是跨App的，只要在同一个开发中账号。不同的App使用同一个Gropu ID都是可以共享数据的。在Shared目录下还有AppGroup目录。里面有各个Group ID的文件夹。其中通过NSUserDefault共享的数据在Library/Prefrences下。是一个plist文件。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/liweican1992/hexoPic/img/20200601141243.png" alt=""></p><h1 id="Widget吊起主工程"><a href="#Widget吊起主工程" class="headerlink" title="Widget吊起主工程"></a>Widget吊起主工程</h1><p>Widget吊起主App通过URLSchemes</p><ol><li>为主App设置URLSchemes<br><img src="https://cdn.jsdelivr.net/gh/liweican1992/hexoPic/img/20200601141310.png" alt=""><br>￼￼2.Widget添加交互<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">[<span class="name">self.extensionContext</span> openURL:[<span class="name">NSURL</span> URLWithString:@<span class="string">"YDUDictionary://action=CameraTranslate"</span>] completionHandler:^(<span class="name">BOOL</span> success) &#123;</span><br><span class="line">                NSLog(<span class="name">@</span><span class="string">"open url result:%d"</span>,success)<span class="comment">;</span></span><br><span class="line">            &#125;]<span class="comment">;</span></span><br></pre></td></tr></table></figure></li><li>主App中处理Scheme.在AppDelegate中实现application:openURL:options:<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">- (<span class="built_in">BOOL</span>)application:(<span class="built_in">UIApplication</span> *)app openURL:(<span class="built_in">NSURL</span> *)url options:(<span class="built_in">NSDictionary</span>&lt;<span class="built_in">UIApplicationOpenURLOptionsKey</span>,<span class="keyword">id</span>&gt; *)options &#123;</span><br><span class="line">      <span class="built_in">NSString</span> *urlStr = [url.absoluteString stringByRemovingPercentEncoding];</span><br><span class="line">        <span class="keyword">if</span> ([urlStr hasPrefix:<span class="string">@"YDUDictionary://action="</span>]) &#123;</span><br><span class="line">            <span class="built_in">NSString</span> *parameter = [urlStr stringByReplacingOccurrencesOfString:<span class="string">@"YDUDictionary://action="</span> withString:<span class="string">@""</span>];</span><br><span class="line">                <span class="keyword">if</span> ([parameter isEqualToString:<span class="string">@"CameraTranslate"</span>]) &#123;</span><br><span class="line">                <span class="comment">//Do Somthinhg</span></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="主App中控制Widget是否显示"><a href="#主App中控制Widget是否显示" class="headerlink" title="主App中控制Widget是否显示"></a>主App中控制Widget是否显示</h1><p>在Widget编辑页面可以进行Widget排序很删减。<br><img src="https://cdn.jsdelivr.net/gh/liweican1992/hexoPic/img/20200601141322.png" alt="">当添加Widget以后，主工程还可以控制Widget是否显示。</p><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">//为什么要引入NotificationCenter呢？可以思考下</span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;NotificationCenter/NotificationCenter.h&gt;</span></span></span><br><span class="line"><span class="comment">//youdao.com.WidgetTest.Widget是Widget的Bundle ID</span></span><br><span class="line">[[NCWidgetController widgetController] setHasContent:<span class="literal">YES</span> forWidgetWithBundleIdentifier:<span class="string">@"youdao.com.WidgetTest.Widget"</span>];</span><br></pre></td></tr></table></figure><h1 id="刷新机制"><a href="#刷新机制" class="headerlink" title="刷新机制"></a>刷新机制</h1><p>Widget有自己进程，有特殊的生命周期和内存限制。通过测试得出</p><blockquote><p>Widget离开屏幕2s以上，就会被销毁回收掉。每次离开前系统会做快照处理。下次进来先加载快照。<br>离开超过2s以上，下次进入就会调用ViewDidLoad,然后是viewWillAppear<br>离开不超过2s 下次进入会调用viewWillAppear</p></blockquote><p>所以为了交互体验，最好是记录用户上次的使用状态，下次加载时候进行还原操作。</p><p>当内存不足时候，系统会优先kill掉Widget。所以要注意内存问题，不要进行需要大量内存的操作。<br>网络请求如果需要频繁刷新。可以在viewWillAppear方法中启用一个Timer,在Timer中请求接口数据。在viewWillDisAppear中取消定时器。</p><h1 id="如何在Widget中使用键盘"><a href="#如何在Widget中使用键盘" class="headerlink" title="如何在Widget中使用键盘"></a>如何在Widget中使用键盘</h1><blockquote><p>Apple官方文档说Widget是不支持键盘输入的。如果在TodayViewController中新建一个输入框。点击是没有反应的。但是我们可以用另外一种办法绕过去。效果如下图。</p></blockquote><p><strong>做法就是做一个假的输入框，让用户点击。点击后present一个ViewController，在这个Controller新建UITextView或者UITextField就可以获取焦点，出现键盘啦</strong></p><p><img src="https://cdn.jsdelivr.net/gh/liweican1992/hexoPic/img/20200601141336.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;目前负责的App新增了Widget功能，之后在组内分享中分享了下Widget的开发经验。基于之前的PPT提炼出了这篇文章。本篇文章只讲基于Widget关于iOS10+ 之后的知识点。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Widget是iOS8以后Apple推出的一项功能，并且在iOS10后进行了大幅的优化。&lt;/p&gt;
&lt;p&gt;在主屏幕和锁定屏幕上向右滑动来访问Widget,也可以在对应的App图标上面使用3D Touch按压访问相应的Widget。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/liweican1992/hexoPic/img/20200601121241.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Widget" scheme="http://yoursite.com/tags/Widget/"/>
    
  </entry>
  
  <entry>
    <title>UIActivityViewController 在iOS11上的坑</title>
    <link href="http://yoursite.com/2017/11/28/UIActivityViewController-%E5%9C%A8iOS11%E4%B8%8A%E7%9A%84%E5%9D%91/"/>
    <id>http://yoursite.com/2017/11/28/UIActivityViewController-%E5%9C%A8iOS11%E4%B8%8A%E7%9A%84%E5%9D%91/</id>
    <published>2017-11-28T06:48:00.000Z</published>
    <updated>2020-06-01T06:51:39.118Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>最近在做针对国外用户的App，考虑到国外都是Facebook和Twitter等社交平台，所以考虑使用iOS系统中的原生分享。但是在iOS11上面遇到一些坑，遂记录一下。</p></blockquote><p>在iOS11以下的版本中，系统默认集成了社交账号的功能。但是在iOS11中内置的社交账号被移除了。并且在iOS11中废弃了一些方法。</p><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">SOCIAL_EXTERN NSString *<span class="keyword">const</span> SLServiceTypeTwitter NS_DEPRECATED(<span class="number">10</span>_8, <span class="number">10</span>_13, <span class="number">6</span>_0, <span class="number">11</span>_0);</span><br><span class="line">SOCIAL_EXTERN NSString *<span class="keyword">const</span> SLServiceTypeFacebook NS_DEPRECATED(<span class="number">10</span>_8, <span class="number">10</span>_13, <span class="number">6</span>_0, <span class="number">11</span>_0);</span><br><span class="line">SOCIAL_EXTERN NSString *<span class="keyword">const</span> SLServiceTypeSinaWeibo NS_DEPRECATED(<span class="number">10</span>_8, <span class="number">10</span>_13, <span class="number">6</span>_0, <span class="number">11</span>_0);</span><br><span class="line">SOCIAL_EXTERN NSString *<span class="keyword">const</span> SLServiceTypeTencentWeibo NS_DEPRECATED(<span class="number">10</span>_8, <span class="number">10</span>_13, <span class="number">6</span>_0, <span class="number">11</span>_0);</span><br><span class="line">SOCIAL_EXTERN NSString *<span class="keyword">const</span> SLServiceTypeLinkedIn NS_DEPRECATED(<span class="number">10</span>_8, <span class="number">10</span>_13, <span class="number">6</span>_0, <span class="number">11</span>_0);</span><br></pre></td></tr></table></figure><p>使用系统分享可以使用<code>UIActivityViewController</code>和<code>SLComposeViewController</code>。但是在iOS11中<code>SLComposeViewController</code>已经无法使用。</p><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">BOOL <span class="built_in">available</span> = [SLComposeViewController isAvailableForServiceType:SLServiceTypeSinaWeibo];</span><br><span class="line">  <span class="comment">//iOS11系统中使用这个方法应该所有平台都是NO</span></span><br><span class="line">  <span class="keyword">if</span> (!<span class="built_in">available</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>所以只能使用<code>UIActivityViewController</code>。使用系统的分享SDK好处还是很多的。不用再各个平台上申请账号，申请Key，设置白名单等等，只需几行代码就能优雅的实现分享功能。</p><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="built_in">NSString</span> *textToShare = <span class="string">@"test titile"</span>;</span><br><span class="line"><span class="built_in">UIImage</span>* imageShare = [<span class="built_in">UIImage</span> imageNamed:<span class="string">@"logo"</span>];</span><br><span class="line"><span class="built_in">NSURL</span> *urlShare = [<span class="built_in">NSURL</span> URLWithString:<span class="string">@"https://www.youdao.com"</span>];</span><br><span class="line"><span class="built_in">NSArray</span> *activityItems = @[textToShare, imageShare, urlShare];</span><br><span class="line"><span class="built_in">UIActivityViewController</span> *actVC = [[<span class="built_in">UIActivityViewController</span> alloc] initWithActivityItems:activityItems applicationActivities:<span class="literal">nil</span>];</span><br><span class="line"><span class="comment">//excludedActivityTypes 是排除那些分享功能，数组里面的都不显示</span></span><br><span class="line">actVC.excludedActivityTypes = @[<span class="built_in">UIActivityTypeMessage</span>,<span class="built_in">UIActivityTypePrint</span>,<span class="built_in">UIActivityTypeSaveToCameraRoll</span>,<span class="built_in">UIActivityTypeAddToReadingList</span>,<span class="built_in">UIActivityTypePostToFlickr</span>,<span class="built_in">UIActivityTypePostToVimeo</span>,<span class="built_in">UIActivityTypeAirDrop</span>];</span><br><span class="line"><span class="comment">//区分iPad 和 iPhone</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">UI_USER_INTERFACE_IDIOM</span>() == <span class="built_in">UIUserInterfaceIdiomPad</span>) &#123;</span><br><span class="line">    actVC.popoverPresentationController.sourceView = <span class="keyword">self</span>.view;</span><br><span class="line">      [<span class="keyword">self</span> presentViewController:actVC animated:<span class="literal">YES</span> completion:<span class="literal">nil</span>];</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      [<span class="keyword">self</span> presentViewController:actVC animated:<span class="literal">YES</span> completion:<span class="literal">nil</span>];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  actVC.completionWithItemsHandler = ^(<span class="built_in">UIActivityType</span>  _Nullable activityType, <span class="built_in">BOOL</span> completed, <span class="built_in">NSArray</span> * _Nullable returnedItems, <span class="built_in">NSError</span> * _Nullable activityError) &#123;</span><br><span class="line">      <span class="built_in">NSLog</span>(<span class="string">@"===%@"</span>,returnedItems);</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure><p>excludedActivityTypes是剔除那些分享功能，枚举如下</p><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="built_in">UIKIT_EXTERN</span> <span class="built_in">NSString</span> *<span class="keyword">const</span> <span class="built_in">UIActivityTypePostToFacebook</span>     <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">6</span>_0) __TVOS_PROHIBITED;    <span class="comment">//发送到Facebook</span></span><br><span class="line"><span class="built_in">UIKIT_EXTERN</span> <span class="built_in">NSString</span> *<span class="keyword">const</span> <span class="built_in">UIActivityTypePostToTwitter</span>      <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">6</span>_0) __TVOS_PROHIBITED;    <span class="comment">//发送到Twitter</span></span><br><span class="line"><span class="built_in">UIKIT_EXTERN</span> <span class="built_in">NSString</span> *<span class="keyword">const</span> <span class="built_in">UIActivityTypePostToWeibo</span>        <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">6</span>_0) __TVOS_PROHIBITED;    <span class="comment">//发送到新浪微博</span></span><br><span class="line"><span class="built_in">UIKIT_EXTERN</span> <span class="built_in">NSString</span> *<span class="keyword">const</span> <span class="built_in">UIActivityTypeMessage</span>            <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">6</span>_0) __TVOS_PROHIBITED;    <span class="comment">//短信</span></span><br><span class="line"><span class="built_in">UIKIT_EXTERN</span> <span class="built_in">NSString</span> *<span class="keyword">const</span> <span class="built_in">UIActivityTypeMail</span>               <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">6</span>_0) __TVOS_PROHIBITED;    <span class="comment">//邮件</span></span><br><span class="line"><span class="built_in">UIKIT_EXTERN</span> <span class="built_in">NSString</span> *<span class="keyword">const</span> <span class="built_in">UIActivityTypePrint</span>              <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">6</span>_0) __TVOS_PROHIBITED;    <span class="comment">//打印</span></span><br><span class="line"><span class="built_in">UIKIT_EXTERN</span> <span class="built_in">NSString</span> *<span class="keyword">const</span> <span class="built_in">UIActivityTypeCopyToPasteboard</span>   <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">6</span>_0) __TVOS_PROHIBITED;    <span class="comment">//拷贝</span></span><br><span class="line"><span class="built_in">UIKIT_EXTERN</span> <span class="built_in">NSString</span> *<span class="keyword">const</span> <span class="built_in">UIActivityTypeAssignToContact</span>    <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">6</span>_0) __TVOS_PROHIBITED;    <span class="comment">//指定给联系人</span></span><br><span class="line"><span class="built_in">UIKIT_EXTERN</span> <span class="built_in">NSString</span> *<span class="keyword">const</span> <span class="built_in">UIActivityTypeSaveToCameraRoll</span>   <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">6</span>_0) __TVOS_PROHIBITED;    <span class="comment">//保存至相机胶卷</span></span><br><span class="line"><span class="built_in">UIKIT_EXTERN</span> <span class="built_in">NSString</span> *<span class="keyword">const</span> <span class="built_in">UIActivityTypeAddToReadingList</span>   <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">7</span>_0) __TVOS_PROHIBITED;    <span class="comment">//添加至阅读列表</span></span><br><span class="line"><span class="built_in">UIKIT_EXTERN</span> <span class="built_in">NSString</span> *<span class="keyword">const</span> <span class="built_in">UIActivityTypePostToFlickr</span>       <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">7</span>_0) __TVOS_PROHIBITED;    <span class="comment">//发送到Flickr(雅虎旗下图片分享网站)</span></span><br><span class="line"><span class="built_in">UIKIT_EXTERN</span> <span class="built_in">NSString</span> *<span class="keyword">const</span> <span class="built_in">UIActivityTypePostToVimeo</span>        <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">7</span>_0) __TVOS_PROHIBITED;    <span class="comment">//发送到Vimeo</span></span><br><span class="line"><span class="built_in">UIKIT_EXTERN</span> <span class="built_in">NSString</span> *<span class="keyword">const</span> <span class="built_in">UIActivityTypePostToTencentWeibo</span> <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">7</span>_0) __TVOS_PROHIBITED;    <span class="comment">//发送到腾讯微博</span></span><br><span class="line"><span class="built_in">UIKIT_EXTERN</span> <span class="built_in">NSString</span> *<span class="keyword">const</span> <span class="built_in">UIActivityTypeAirDrop</span>            <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">7</span>_0) __TVOS_PROHIBITED;    <span class="comment">//AirDrop</span></span><br><span class="line"><span class="built_in">UIKIT_EXTERN</span> <span class="built_in">NSString</span> *<span class="keyword">const</span> <span class="built_in">UIActivityTypeOpenInIBooks</span>       <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">9</span>_0) __TVOS_PROHIBITED;    <span class="comment">//在iBooks中打开</span></span><br></pre></td></tr></table></figure><blockquote><p>如果是iOS11以下的系统，上面的分享功能应该没什么问题。但是在iOS11上面出现了Twitter和Facebook都不能分享的问题（微信、微博等正常）。</p></blockquote><p>在iOS11上面分享这两个平台点击logo以后没有任何反应。下面开始排查问题。</p><ul><li><h5 id="猜想一：系统移除掉内置社交平台后，Twitter和Facebook的App没有更新"><a href="#猜想一：系统移除掉内置社交平台后，Twitter和Facebook的App没有更新" class="headerlink" title="猜想一：系统移除掉内置社交平台后，Twitter和Facebook的App没有更新"></a>猜想一：系统移除掉内置社交平台后，Twitter和Facebook的App没有更新</h5><p>升级手机中这两个App，<strong>更新后无效</strong>。但是找到了一些资料<br><a href="https://twittercommunity.com/t/bug-in-ios-11/91490/9" target="_blank" rel="noopener">Twitter - Developers:Bug in iOS 11?</a><br>Twitter 官方说已经针对iOS11进行了更新适配</p></li><li><h5 id="猜想二：国内特供版？接口封掉了"><a href="#猜想二：国内特供版？接口封掉了" class="headerlink" title="猜想二：国内特供版？接口封掉了"></a>猜想二：国内特供版？接口封掉了</h5><p>iOS10上面一切正常，但是考虑到iOS11系统的改变，所以删掉中国App Store下载的App，登录美国App Store 账号下载这两个App。打开后依旧。<strong>无效</strong></p><blockquote><p>此时发现系统相册中的分享，点击Facebook和Twitter也无反应。所以应该和App无关</p></blockquote></li><li><h5 id="猜想三：Great-Wall"><a href="#猜想三：Great-Wall" class="headerlink" title="猜想三：Great Wall"></a>猜想三：Great Wall</h5><p>香港的朋友试试他的手机。<strong>依旧无解</strong></p></li><li><h5 id="猜想四：iOS11系统版本bug，没更新"><a href="#猜想四：iOS11系统版本bug，没更新" class="headerlink" title="猜想四：iOS11系统版本bug，没更新"></a>猜想四：iOS11系统版本bug，没更新</h5><p>都更新到最新的iOS11.1.2(正式版)。<strong>问题依旧</strong></p></li><li><h5 id="猜想五：手机的原因，因为是国行"><a href="#猜想五：手机的原因，因为是国行" class="headerlink" title="猜想五：手机的原因，因为是国行"></a>猜想五：手机的原因，因为是国行</h5><p>以上几种情况使用了不同的机型测试，但是都是国行手机。但是现在都是全网通并且国外卖的手机也都是大陆产的，所以一开始就没考虑这个。以上猜想都否决以后开始想到这个原因。<br>找了一圈，最后测试发现</p><blockquote><p>印度买的iPhone 5S在iOS11上分享Facebook和Twitter 成功<br>日本买的iPhone 8 Plus 在iOS11上面分享成功<br>并且iOS11的系统有11.1.2和11.1.0的</p></blockquote></li></ul><blockquote><p>所以最后结论是在iOS11上面移除掉了系统内置分享后，国行手机对Facebook 和Twitter 的原生分享都失效了。但是除了国行以外的手机应该都没问题。</p></blockquote><h5 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h5><p>只有自己接入Facebook和Twitter的SDK，去官网注册key不再使用系统的。<br>但是考虑到我们的用户群都是外国人，国行手机占有率很低，所以我们忽略了这个Bug(如果是Bug的话)，毕竟国内常用的微信、微博、QQ一切正常。</p><p>这个问题我会持续追踪，看看后期系统更新会不会解决这个问题。另外我也在Twitter官网上提问了。目前为止还没有回应。</p><p><a href="https://twittercommunity.com/t/in-ios11-use-uiactivityviewcontroller-to-share-have-no-reaction/97486" target="_blank" rel="noopener">In iOS11,Use UIActivityViewController to share have no reaction</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;最近在做针对国外用户的App，考虑到国外都是Facebook和Twitter等社交平台，所以考虑使用iOS系统中的原生分享。但是在iOS11上面遇到一些坑，遂记录一下。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在iOS11以下的版本中，系统默认集
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Apple开发账号续费流程及Tips（17年7月更新）</title>
    <link href="http://yoursite.com/2016/07/17/Apple%E5%BC%80%E5%8F%91%E8%B4%A6%E5%8F%B7%E7%BB%AD%E8%B4%B9%E6%B5%81%E7%A8%8B%E5%8F%8ATips%EF%BC%8817%E5%B9%B47%E6%9C%88%E6%9B%B4%E6%96%B0%EF%BC%89/"/>
    <id>http://yoursite.com/2016/07/17/Apple%E5%BC%80%E5%8F%91%E8%B4%A6%E5%8F%B7%E7%BB%AD%E8%B4%B9%E6%B5%81%E7%A8%8B%E5%8F%8ATips%EF%BC%8817%E5%B9%B47%E6%9C%88%E6%9B%B4%E6%96%B0%EF%BC%89/</id>
    <published>2016-07-17T08:47:00.000Z</published>
    <updated>2020-06-01T06:22:52.882Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>此文为简书旧文</p></blockquote><p>最近公司开发者账号马上到期了，需要进行续费工作。现在记录一下流程和遇到的一些坑。<br>  首先登陆开发者中心<a href="https://developer.apple.com/" target="_blank" rel="noopener">https://developer.apple.com/</a><br>  选择右上方的Account,然后输入账号和密码。<strong><em>进入后如果过期时间小于30天，在首页会给你一个小弹窗告诉你要续费。</em></strong></p><blockquote><p>update<br>补充下图片，当还有一个月过期时候，登录iTunes Connect 或者开发者中心都会有提示信息</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/liweican1992/hexoPic/img/20200601141646.png" alt=""></p><a id="more"></a><p><img src="https://cdn.jsdelivr.net/gh/liweican1992/hexoPic/img/20200601141702.png" alt=""></p><p>点击任意入口。登录开发者账号，会进入到付款界面</p><p><img src="https://cdn.jsdelivr.net/gh/liweican1992/hexoPic/img/20200601141713.png" alt=""><br>选择VISA还是MasterCard。国内银联当然是不支持啦，但是这里要注意，招商银行VISA全币卡（就是黑色那张）是不能用的！</p><p><img src="https://cdn.jsdelivr.net/gh/liweican1992/hexoPic/img/20200601141723.png" alt=""><br>  后来查了下，说要去招行官网开通什么结算通道，但是开通以后依旧不行，还有人说要使用VISA和银联双标卡，说苹果关闭了国内银行发行的VISA单标卡的结算通道。总之用不了啊。。。</p><p><strong><em>update</em></strong></p><blockquote><p>评论有小伙伴反应招行Visa单标卡验证失败的原因是<br>可能是因为没有开通：<br>1：网上支付功能<br>2：VISA验证服务</p></blockquote><blockquote><p>我记得当时我有去招行官网开通VISA验证服务，至于网上支付功能这个应该是开通着的，但是时间太久就不得了。如果有小伙伴出现招行单标卡验证失败的情况，请尝试上述两种方法。有结果的话麻烦留言告知一下~</p></blockquote><p>  因为我的招行万事达卡还在申请的路上，所以我也没办法尝试招行的Mastercard能不能用。最后用了同事一张国外的Mastercard付费成功。</p><blockquote><p>update 17年7月<br>发票问题<br>17年税改以后发票报销不能只写公司抬头了，还要写税号。但是苹果给的界面并没有填写入口。但是却说可以电话订购。<br>如果有小伙伴有电话订购的经历，欢迎留言补充。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/liweican1992/hexoPic/img/20200601141846.png" alt=""></p><p>   付费以后过几分钟会收到Apple发的邮件，一个是订单确认邮件一个是电子收据</p><p><img src="https://cdn.jsdelivr.net/gh/liweican1992/hexoPic/img/20200601141857.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/liweican1992/hexoPic/img/20200601141942.png" alt=""></p><blockquote><p>update 17年<br>今年续费出现一种新情况，24小时以后再看结果好了</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/liweican1992/hexoPic/img/20200601142001.png" alt=""></p><blockquote><p>上面那个挂掉了，说订单失败，重新换了一个信用卡</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/liweican1992/hexoPic/img/20200601142017.png" alt=""></p><p>因为写的联系和发票邮箱不是Apple开发者账号那个主邮箱，登录开发者账号主邮箱，会有一封名为“Thank you for purchasing an Apple Developer Program ”的邮件。</p><p><img src="https://cdn.jsdelivr.net/gh/liweican1992/hexoPic/img/20200601142029.png" alt=""><br>邮件中会告诉你你已经续费成功，并且到期日期也确实更新了。<br>but！！！<br>当我回到开发者中心的MembersShip里面查看<br><strong>到期信息还是依旧！</strong><br><img src="https://cdn.jsdelivr.net/gh/liweican1992/hexoPic/img/20200601142055.png" alt=""></p><p>WTF! 然后上网找资料，有人说要去主账号邮箱找一个激活码，用激活码激活，但是里面根本没有这个邮件！<br>因为怕账号到期App被下架，所以我发邮件咨询了苹果官方。具体入口在<br>开发者中心首页-&gt;右上方Support-&gt;右下角Contact Us。然后<br><img src="https://cdn.jsdelivr.net/gh/liweican1992/hexoPic/img/20200601142105.png" alt=""></p><p>Then<br><img src="https://cdn.jsdelivr.net/gh/liweican1992/hexoPic/img/20200601142136.png" alt=""></p><p>Ok，过了小半天就收到Apple的回复邮件了</p><p><img src="https://cdn.jsdelivr.net/gh/liweican1992/hexoPic/img/20200601142147.png" alt=""></p><p>原来苹果信息更新也是很不及时的，但终究续费成功。<br>Done~</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;此文为简书旧文&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;最近公司开发者账号马上到期了，需要进行续费工作。现在记录一下流程和遇到的一些坑。&lt;br&gt;  首先登陆开发者中心&lt;a href=&quot;https://developer.apple.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://developer.apple.com/&lt;/a&gt;&lt;br&gt;  选择右上方的Account,然后输入账号和密码。&lt;strong&gt;&lt;em&gt;进入后如果过期时间小于30天，在首页会给你一个小弹窗告诉你要续费。&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;update&lt;br&gt;补充下图片，当还有一个月过期时候，登录iTunes Connect 或者开发者中心都会有提示信息&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/liweican1992/hexoPic/img/20200601141646.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
</feed>
